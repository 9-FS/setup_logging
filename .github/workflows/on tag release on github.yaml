name: "On Tag Release on GitHub"
env:
    REPO_NAME: "setup_logging"
    RUN_TESTS: true
    RUST_VERSION: "1.80"
on:
    push:
        tags:
            # -   "[0-9]+.[0-9]+.[0-9]+"
            -   "*" # execute every time tag is pushed


jobs:
    initialisation:
        name: "Initialisation"
        env:
            working-directory: ${{github.workspace}}
        runs-on: "ubuntu-latest"

        steps:
            -   name: "Checkout Repository"
                uses: "actions/checkout@v4" # makes repository structure available
                with:
                    fetch-depth: 0 # fetch all commits, so all tags can be accessed

            -   name: "NOW"
                id: "now"
                run: "echo \"NOW=$(date +'%Y-%m-%dT%H:%M:%S')\" >> $GITHUB_OUTPUT"  # get datetime, save in NOW, push to output

            -   name: "TAG"
                id: "tag"
                run: "echo \"TAG=$(git describe --tags --abbrev=0)\" >> $GITHUB_OUTPUT" # get tag, save in TAG, push to output

            -   name: "TAG_PREVIOUS"
                id: "tag_previous"
                run: "echo \"TAG_PREVIOUS=$(git tag --sort=-creatordate | sed -n '2p')\" >> $GITHUB_OUTPUT" # get previous tag, save in TAG_PREVIOUS, push to output

            -   name: "TODAY"
                id: "today"
                run: "echo \"TODAY=$(date +'%Y-%m-%d')\" >> $GITHUB_OUTPUT" # get date, save in TODAY, push to output

        outputs:    # set step output as job output so other jobs can access
            NOW: ${{steps.now.outputs.NOW}}
            TAG: ${{steps.tag.outputs.TAG}}
            TAG_PREVIOUS: ${{steps.tag_previous.outputs.TAG_PREVIOUS}}
            TODAY: ${{steps.today.outputs.TODAY}}


    test:
        name: "Run Tests"
        env:
            working-directory: ${{github.workspace}}
        needs: ["initialisation"]
        runs-on: "ubuntu-latest"

        steps:
            -   name: "Checkout Repository"
                uses: "actions/checkout@v4" # makes repository structure available

            -   name: "Install Rust"
                uses: "actions-rust-lang/setup-rust-toolchain@v1"
                with:
                    toolchain: ${{env.RUST_VERSION}}

            -   name: "Check Project Version and Tag Match"
                run: |
                    project_version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
                    if [ "$project_version" == "${{needs.initialisation.outputs.TAG}}" ]; then
                        exit 0
                    else
                        exit 1
                    fi

            -   name: "Run Tests"
                if: ${{env.RUN_TESTS == 'true'}}
                run: "cargo test"


    create_release:
        name: "Create Release on GitHub"
        env:
            working-directory: ${{github.workspace}}
        needs: ["initialisation", "test"]
        runs-on: "ubuntu-latest"

        steps:
            -   name: "Checkout Repository"
                uses: "actions/checkout@v4" # makes repository structure available
                with:
                    fetch-depth: 0 # fetch all commits, so we can access all tags

            -   name: "Generate Changelog"
                id: "generate_changelog"
                run: |
                    commit_messages=$(git log --pretty=format:'- %h: %s' '${{needs.initialisation.outputs.TAG_PREVIOUS}}'..'${{needs.initialisation.outputs.TAG}}')
                    {
                        echo "changelog<<EOF" # use heredoc to handle multiline output properly
                        echo "## Changelog"
                        echo ""
                        echo "$commit_messages"
                        echo "EOF"
                    } >> $GITHUB_OUTPUT

            -   name: "Create Release"
                env:
                    GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
                id: "create_release"
                uses: "actions/create-release@v1"                                                                                       # function that creates release
                with:                                                                                                                   # parameters
                    body: ${{steps.generate_changelog.outputs.changelog}}                                                               # release text
                    draft: false
                    prerelease: false
                    release_name: "${{needs.initialisation.outputs.TODAY}} ${{env.REPO_NAME}} ${{needs.initialisation.outputs.TAG}}"    # release title
                    tag_name: ${{github.ref}}                                                                                           # release tag